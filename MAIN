import requests
from ipyleaflet import Map, CircleMarker, basemaps, Polyline, Popup
from geopy import distance
from ipywidgets import Label, Button, Layout, Text, VBox, HTML
from IPython.display import display, HTML as HTMLDisplay

m = Map(center=(0, 0), zoom=2, basemap=basemaps.OpenStreetMap.Mapnik)

label = HTML()

points = []
handler_state = [False]  # Use a list to hold the state

# Create instruction
instruction = HTML("<p>First choose a name for the hub, then select a representing point on the map. Continue with other points (hubs).</p>")
name_prompt = Text(value='', placeholder='Enter Hub Name', description='Hub Name:', disabled=False)

# Implementing button tooltips using HTML & JS
HTMLDisplay("""
<style>
.tooltip {
  position: relative;
  display: inline-block;
}
.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: #555;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
  position: absolute;
  z-index: 1;
  bottom: 100%; 
  left: 50%; 
  margin-left: -60px; 
  opacity: 0;
  transition: opacity 0.3s;
}
.tooltip:hover .tooltiptext {
  visibility: visible;
  opacity: 1;
}
</style>
""")

new_route_button = Button(description='New route', layout=Layout(width='150px'), tooltip='Create a new route')
undo_button = Button(description='Undo', layout=Layout(width='100px'), tooltip='Delete the previously created hub', disabled=True)
done_button = Button(description='Generate', layout=Layout(width='100px'), tooltip='Create a route', disabled=True)

def get_route(coordinates):
    formatted_coords = ';'.join([f'{coord[1]},{coord[0]}' for coord in coordinates])
    route_request = f'http://router.project-osrm.org/route/v1/driving/{formatted_coords}?overview=full&geometries=geojson'
    response = requests.get(route_request)
    data = response.json()
    route = data['routes'][0]['geometry']['coordinates']
    route = [(coord[1], coord[0]) for coord in route]
    return route

def handle_interaction(**kwargs):
    if handler_state[0] and kwargs.get('type') == 'click':
        coordinates = kwargs.get('coordinates')
        point_name = name_prompt.value

        marker = CircleMarker(location=coordinates, color="grey", radius=5, fill_opacity=1.0)
        m.add_layer(marker)

        label_html = HTML(value=f'<b>{point_name}</b>')
        popup = Popup(
            location=coordinates,
            child=label_html,
            close_button=False,
            auto_close=False,
            close_on_escape_key=False
        )
        m.add_layer(popup)

        points.append((coordinates, popup, marker, point_name))
        name_prompt.value = ''

def calculate_distance(b):
    if len(points) > 1:
        route = get_route([point[0] for point in points])
        line = Polyline(locations=route, color="blue", fill=False)
        m.add_layer(line)
        
        total_dist = 0
        dist_str = ""
        for i in range(1, len(points)):
            dist = distance.distance(points[i-1][0], points[i][0]).km
            total_dist += dist
            dist_str += "{} - {}: {:.2f} km<br>".format(points[i-1][3], points[i][3], dist)

        label.value = dist_str + '<b>Total distance: {:.2f} km</b>'.format(total_dist)

def handle_new_route_click(b):
    for point in points:
        m.remove_layer(point[1])  # Remove Popup
        m.remove_layer(point[2])  # Remove Marker
    points.clear()  # Clear Points
    for layer in list(m.layers):  # Remove Polylines
        if isinstance(layer, Polyline):
            m.remove_layer(layer)
    label.value = ''  # Clear Label
    handler_state[0] = True
    done_button.disabled = False
    undo_button.disabled = False

def handle_done_button_click(b):
    handler_state[0] = False
    done_button.disabled = True
    undo_button.disabled = True
    calculate_distance(b)

def handle_undo_button_click(b):
    if points:
        last_point = points.pop()
        m.remove_layer(last_point[1])  # Remove Popup
        m.remove_layer(last_point[2])  # Remove Marker
        if not points:
            undo_button.disabled = True

new_route_button.on_click(handle_new_route_click)
done_button.on_click(handle_done_button_click)
undo_button.on_click(handle_undo_button_click)

m.on_interaction(handle_interaction)

display(VBox([instruction, new_route_button, undo_button, done_button, name_prompt]))
display(m)
display(label)
